package sse

import (
	"bytes"
	"testing"
)

type testVector struct {
	blockSize int
	input     []byte
	output    []byte
}

var padTests = []testVector{
	// Pads buffers.
	{
		16,
		[]byte{
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF,
		},
		[]byte{
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF, 0x04, 0x04, 0x04, 0x04,
		},
	},

	// Pads empty buffers.
	{
		16,
		[]byte{},
		[]byte{
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		},
	},

	// Pads buffers larger than the block size.
	{
		16,
		[]byte{
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF,
		},
		[]byte{
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
			0xDE, 0xAD, 0xBE, 0xEF, 0x0C, 0x0C, 0x0C, 0x0C,
			0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
		},
	},
}

func TestPad(t *testing.T) {
	for i, v := range padTests {
		o := Pad(v.input, v.blockSize)
		if !bytes.Equal(o, v.output) {
			t.Errorf("Pad %d: expected %x, got %x", i, v.output, o)
		}
	}
}

func TestUnpad(t *testing.T) {
}
